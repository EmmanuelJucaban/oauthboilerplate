{"version":3,"sources":["components/someRandomComponent.js","App.js","actions/index.js","actions/types.js","reducers/index.js","reducers/counterReducer.js","reducers/authReducer.js","index.js"],"names":["Random","react_default","a","createElement","this","props","counter","Component","connect","_ref","App","fetchUser","auth","someRandomComponent","BrowserRouter","href","onClick","incrementCounter","decrementCounter","renderStuff","type","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","res","wrap","_context","prev","next","axios","get","sent","payload","data","stop","_x","apply","arguments","combineReducers","state","length","undefined","action","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"uQAIMA,mLAEE,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,UAAKC,KAAKC,MAAMC,iBALXC,aAgBNC,kBAJf,SAAAC,GACI,MAAO,CAAEH,QADuBG,EAAVH,UAIc,KAAzBE,CAA+BR,GCXxCU,8LAIFN,KAAKC,MAAMM,kDAIX,OAAGP,KAAKC,MAAMO,KACLX,EAAAC,EAAAC,cAACU,EAAD,MAEAZ,EAAAC,EAAAC,cAAA,qEAIT,OACIF,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACEb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGY,KAAK,gBAAR,qBACAd,EAAAC,EAAAC,cAAA,KAAGY,KAAK,eAAR,UACAd,EAAAC,EAAAC,cAAA,yBAAiBC,KAAKC,MAAMC,SAC5BL,EAAAC,EAAAC,cAAA,UAAQa,QAASZ,KAAKC,MAAMY,kBAA5B,aACAhB,EAAAC,EAAAC,cAAA,UAAQa,QAASZ,KAAKC,MAAMa,kBAA5B,aACCd,KAAKe,uBAvBAZ,aAkCHC,kBAJf,SAAAC,GACE,MAAO,CAAEH,QAD8BG,EAAfH,QACNM,KADqBH,EAANG,OAIK,CAAEK,iBCxCV,WAC5B,MAAO,CAAEG,KCJoB,sBF2C2BF,iBCpC5B,WAC5B,MAAO,CAAEE,KCPoB,sBF0C6CT,UChCrD,iCAAAF,EAAAY,OAAAC,EAAA,EAAAD,CAAAE,EAAArB,EAAAsB,KAAO,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAJ,EAAArB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACVC,IAAMC,IAAI,oBADA,OACtBN,EADsBE,EAAAK,KAE5BR,EAAS,CAAEN,KCXW,aDWOe,QAASR,EAAIS,OAFd,wBAAAP,EAAAQ,SAAAZ,MAAP,gBAAAa,GAAA,OAAA7B,EAAA8B,MAAAnC,KAAAoC,YAAA,KDgCVhC,CAA4EE,kBGtC5E+B,cAAgB,CAC3BnC,QCJW,WAA2B,IAAlBoC,EAAkBF,UAAAG,OAAA,QAAAC,IAAAJ,UAAA,GAAAA,UAAA,GAAV,EAC5B,QADsCA,UAAAG,OAAA,EAAAH,UAAA,QAAAI,GACxBxB,MACV,IFJyB,oBEKrB,OAAOsB,EAAQ,EACnB,IFLyB,oBEMrB,OAAOA,EAAQ,EACnB,QACI,OAAOA,IDFf9B,KELW,WAA8B,IAArB8B,EAAqBF,UAAAG,OAAA,QAAAC,IAAAJ,UAAA,GAAAA,UAAA,GAAb,KAAMK,EAAOL,UAAAG,OAAA,EAAAH,UAAA,QAAAI,EACzC,OAAOC,EAAOzB,MACV,IHFkB,aGGd,OAAOyB,EAAOV,UAAW,EAC7B,QACI,OAAOO,MCSbI,EAAQC,YAAYC,EAAU,GAAIC,YAAgBC,MAGxDC,IAASC,OACLnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAUP,MAAOA,GACd7C,EAAAC,EAAAC,cAACmD,EAAD,OAGHC,SAASC,eAAe","file":"static/js/main.6743ed2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nclass Random extends Component {\n    render() {\n        return (\n            <div>\n                <h1>IF not logged in, you can't see me</h1>\n                <h2>{this.props.counter}</h2>\n            </div>\n        )\n    }\n}\n\n\nfunction mapStateToProps({counter}) {\n    return { counter }\n}\n\nexport default connect(mapStateToProps, null)(Random);","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\nimport { incrementCounter, decrementCounter, fetchUser } from './actions';\n\n\nimport Random from './components/someRandomComponent';\n\nclass App extends Component {\n\n\n  componentDidMount() {\n    this.props.fetchUser();\n  }\n\n  renderStuff() {\n    if(this.props.auth) {\n      return <Random/>;\n    } else {\n      return <h1> You are not logged in</h1>;\n    }\n  }\n  render() {\n    return (      \n        <Router>\n          <div>\n            <a href='/auth/google'>Login with Google</a>\n            <a href='/api/logout'>Logout</a>\n            <h1>Hello World {this.props.counter}</h1>\n            <button onClick={this.props.incrementCounter}>Increment</button>\n            <button onClick={this.props.decrementCounter}>Decrement</button>\n            {this.renderStuff()}\n          </div>\n        </Router>\n      );\n  }\n}\n\nfunction mapStateToProps({counter, auth}){\n  return { counter, auth };\n}\n\nexport default connect(mapStateToProps, { incrementCounter, decrementCounter, fetchUser })(App);\n","import { INCREMENT_COUNTER, DECREMENT_COUNTER, FETCH_USER } from './types';\nimport axios from  'axios';\n\nexport const incrementCounter = () => {\n    return { type: INCREMENT_COUNTER };\n};\n\nexport const decrementCounter = () => {\n    return { type: DECREMENT_COUNTER };\n};\n\nexport const fetchUser = () =>  async dispatch => {\n    const res = await axios.get('/api/currentUser');\n    dispatch({ type: FETCH_USER, payload: res.data});\n}\n\n","export const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER';\nexport const FETCH_USER = 'FETCH_USER';","import { combineReducers } from 'redux';\n\nimport counterReducer from './counterReducer';\nimport authReducer from './authReducer';\n\nexport default combineReducers({\n    counter: counterReducer,\n    auth: authReducer\n});","import { INCREMENT_COUNTER, DECREMENT_COUNTER } from './../actions/types';\n\nexport default function(state = 0, action){\n    switch(action.type) {\n        case INCREMENT_COUNTER:\n            return state + 1;\n        case DECREMENT_COUNTER:\n            return state - 1;\n        default:\n            return state;\n    }\n}","import { FETCH_USER } from './../actions/types';\n\nexport default function(state = null, action){\n    switch(action.type) {\n        case FETCH_USER:\n            return action.payload || false;\n        default:\n            return state\n    }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// The provider is just a component takes a store prop\n// and gives all of our other components \n// access to that store when they need it\nimport { Provider } from 'react-redux';\n\n// We need the creatStore function to house all of our state\nimport { createStore, applyMiddleware } from 'redux';\nimport reduxThunk from 'redux-thunk';\n\nimport reducers from './reducers';\n\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\n\nReactDOM.render(\n    <Provider store={store}>\n       <App />\n    </Provider>\n ,\n    document.getElementById(\"root\")\n );\n"],"sourceRoot":""}